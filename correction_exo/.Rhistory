h <- c(3,0.5,0.01)
iter <- 2
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
for (i in h){
tmp <- npregress(X,Y,bandwidth = i)
prev <- predict(tmp,newdata=x)
lines(x,prev,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.55)
dev.off()
h <- c(3,0.5,0.01)
iter <- 2
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
for (i in h){
tmp <- npregress(X,Y,bandwidth = i)
prev <- predict(tmp,newdata=x)
lines(x,prev,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.55)
i<-1
prev <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
library(FNN)
prev <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
k <- c(1,10,100)
iter <- 2
for (i in k){
prev <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
lines(x,prev,col=iter,lty=iter,lwd=3)
iter <- iter+1)
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.55)
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
k <- c(1,10,100)
iter <- 2
for (i in k){
prev <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
lines(x,prev,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.55)
head(prev)
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
k <- c(1,10,100)
iter <- 2
for (i in k){
mod <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
lines(x,mod$pred,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.55)
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
k <- c(1,10,100)
iter <- 2
for (i in k){
mod <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
lines(x,mod$pred,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.75)
pdf("~/Dropbox/LIVRE_REGRESSION/SPLINES/trois_knn_est.pdf")
library(FNN)
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
k <- c(1,10,100)
iter <- 2
for (i in k){
mod <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
lines(x,mod$pred,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.75)
dev.off()
library(FNN)
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
k <- c(1,10,100)
iter <- 2
for (i in k){
mod <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
lines(x,mod$pred,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.75)
pdf("~/Dropbox/LIVRE_REGRESSION/SPLINES/trois_knn_est.pdf")
library(FNN)
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
k <- c(1,10,100)
iter <- 2
for (i in k){
mod <- knn.reg(train=X,test=as.matrix(x),y=Y,k=i)
lines(x,mod$pred,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","k=1","k=10","h=100"),col=1:4,lwd=2,lty=1:4,cex=0.75)
dev.off()
pdf("~/Dropbox/LIVRE_REGRESSION/SPLINES/trois_kern_est.pdf")
par(mfrow=c(1,2),pch=20,mai = c(0.1,0.15,0.1,0.1),mar=c(3,3,1,1),cex.axis=0.6,cex.lab=0.8,mgp=c(1.5,0.3,0),oma=c(1,0,0,0),tcl=-0.4,omi=c(0,0,0,0))
plot(X,Y,pch=20,xlab="",ylab="")
x <- seq(-2*pi,2*pi,by=0.01)
lines(x,sin(x),lwd=2)
h <- c(3,0.5,0.01)
iter <- 2
plot(x,sin(x),type="l",lwd=2,xlab="",ylab="") #vraie fonction
for (i in h){
tmp <- npregress(X,Y,bandwidth = i)
prev <- predict(tmp,newdata=x)
lines(x,prev,col=iter,lty=iter,lwd=3)
iter <- iter+1
}
legend("topright",legend=c("sinus","h=3","h=0.5","h=0.01"),col=1:4,lwd=2,lty=1:4,cex=0.55)
dev.off()
q()
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE, size = "script",fig.height=3.5, fig.width=5,prompt=TRUE,collapse=TRUE,fig.align='center')
#options(width = 999)
#knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
#                      cache = FALSE, tidy = FALSE, size = "script")
n <- 2000
seuil <- 0.25
set.seed(1234)
X1 <- runif(n)
set.seed(5678)
X2 <- runif(n)
set.seed(9012)
U <- runif(n)
Y <- rep(0,n)
Y[X1<=0.25 & U<=seuil] <- 1
Y[X1>0.25 & X2>=0.75 & U<=seuil] <- 1
Y[X1>0.25 & X2<0.75 & U>seuil] <- 1
#plot(X1,X2,col=Y+1)
donnees <- data.frame(X1,X2,Y)
indapp <- 1:1500
dapp <- donnees[indapp,]
dtest <- donnees[-indapp,]
library(caret)
K_cand <- data.frame(k=seq(1,500,by=20))
library(caret)
ctrl1 <- trainControl(method="LGOCV",number=1,index=list(1:1500))
e1 <- train(Y~.,data=donnees,method="knn",trControl=ctrl1,tuneGrid=K_cand)
e1
n <- 2000
seuil <- 0.25
set.seed(1234)
X1 <- runif(n)
set.seed(5678)
X2 <- runif(n)
set.seed(9012)
U <- runif(n)
Y <- rep(0,n)
Y[X1<=0.25 & U<=seuil] <- 1
Y[X1>0.25 & X2>=0.75 & U<=seuil] <- 1
Y[X1>0.25 & X2<0.75 & U>seuil] <- 1
#plot(X1,X2,col=Y+1)
donnees <- data.frame(X1,X2,Y=AS.factor(Y))
n <- 2000
seuil <- 0.25
set.seed(1234)
X1 <- runif(n)
set.seed(5678)
X2 <- runif(n)
set.seed(9012)
U <- runif(n)
Y <- rep(0,n)
Y[X1<=0.25 & U<=seuil] <- 1
Y[X1>0.25 & X2>=0.75 & U<=seuil] <- 1
Y[X1>0.25 & X2<0.75 & U>seuil] <- 1
#plot(X1,X2,col=Y+1)
donnees <- data.frame(X1,X2,Y=as.factor(Y))
indapp <- 1:1500
dapp <- donnees[indapp,]
dtest <- donnees[-indapp,]
library(caret)
K_cand <- data.frame(k=seq(1,500,by=20))
library(caret)
ctrl1 <- trainControl(method="LGOCV",number=1,index=list(1:1500))
e1 <- train(Y~.,data=donnees,method="knn",trControl=ctrl1,tuneGrid=K_cand)
e1
q()
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE, size = "script",fig.height=3.5, fig.width=5,prompt=TRUE,collapse=TRUE,fig.align='center')
#options(width = 999)
#knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
#                      cache = FALSE, tidy = FALSE, size = "script")
justOn<-read.csv("~/Dropbox/LAURENT/AUTO_ENTRE/GRTGAZ/DOC_RAYANE/Maintenance Prédictive Markdown/two.csv",sep=";",header=TRUE,encoding = "UTF-8")
fullmat<-read.csv("~/Dropbox/LAURENT/AUTO_ENTRE/GRTGAZ/DOC_RAYANE/Maintenance Prédictive Markdown/First.csv",sep=";",header=TRUE,encoding = "UTF-8")
#justOn machine allumée, fullmat machine allumée/éteinte
justOn<-justOn[,-1]
fullmat<-fullmat[,-1]
#Original names
original_names<-colnames(fullmat)
#Rename sensors
colnames(fullmat)<-c("Date","PA","PR","PE1","DFP1","DG1","DFES1","PE2","DFP2","DGG1","DFES2","PAE","PDE","VM",
"VCGN","V","V1","V2","V3","V4","V5","TSR","TPCGN","TPCGN1","TPCGN2","TPCGN3","PV","PHLLA","TCH","THLSAE")
colnames(justOn)<-c("Date","PA","PR","PE1","DFP1","DG1","DFES1","PE2","DFP2","DGG1","DFES2","PAE","PDE","VM",
"VCGN","V","V1","V2","V3","V4","V5","TSR","TPCGN","TPCGN1","TPCGN2","TPCGN3","PV","PHLLA","TCH","THLSAE")
#New names
new_names<-colnames(fullmat)
#labelling Time if machine is off or on
fullmat$State<- fullmat$Date %in% justOn$Date
#Names table
names<-cbind(original_names,new_names)
fullmat$Date<-substr(fullmat$Date,1,19)
justOn$Date<-substr(justOn$Date,1,19)
fullmat$Date<-as.POSIXct(fullmat$Date,format="%d/%m/%Y %H:%M:%OS")
justOn$Date<-as.POSIXct(justOn$Date,format="%d/%m/%Y %H:%M:%OS")
vecp<-c(1,2,13,14,21,26,27,28,29)
vecg<-c(3:12)
fullmat<-fullmat[order(fullmat$Date),]
justOn<-justOn[order(justOn$Date),]
#unités se mesures
unite<-c("Bar","Bar","Bar","NI/min","%","NI/min","Bar","NI/min","%",
"NI/min","Bar","mbar","Tr/min","Tr/min"
,"um pp","um pp","um pp",
"um pp","um pp","um pp",
"°C","°C","°C","°C","°C",
"%","Bar","°C","°C","°C")
names<-cbind(names,unite)
df <- fullmat
dim(df)
names(df)
ggplot(data = fullmat)+aes(x = Date , y = DFP1)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz",subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
geom_hline(yintercept = 270,color="blue")
library(tidyverse)
ggplot(data = fullmat)+aes(x = Date , y = DFP1)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz",subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
geom_hline(yintercept = 270,color="blue")
ggplot(data = fullmat)+aes(x = Date , y = DFP1)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz",subtitle="Début de hausses des fuites récurrentes après le 09/2018" )#+
ggplot(data = fullmat)+aes(x = Date , y = DFP1)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
ggplot(data = fullmat)+aes(x = Date , y = DFP1)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")+
theme_classic()#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
pdf("~/Dropbox/LAURENT/AUTO_ENTRE/GRTGAZ/SLIDES_MAI2019/debit1.pdf")
ggplot(data = fullmat)+aes(x = Date , y = DFP1)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")+
theme_classic()#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
#  geom_hline(yintercept = 270,color="blue")
dev.off()
ggplot(data = fullmat)+aes(x = Date , y = DFP2)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")+
theme_classic()#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
pdf("~/Dropbox/LAURENT/AUTO_ENTRE/GRTGAZ/SLIDES_MAI2019/debit1.pdf")
ggplot(data = fullmat)+aes(x = Date , y = DFP2)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")+
theme_classic()#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
#  geom_hline(yintercept = 270,color="blue")
dev.off()
pdf("~/Dropbox/LAURENT/AUTO_ENTRE/GRTGAZ/SLIDES_MAI2019/debit1.pdf")
ggplot(data = fullmat)+aes(x = Date , y = DFP1)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")+
theme_classic()#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
#  geom_hline(yintercept = 270,color="blue")
dev.off()
pdf("~/Dropbox/LAURENT/AUTO_ENTRE/GRTGAZ/SLIDES_MAI2019/debit2.pdf")
ggplot(data = fullmat)+aes(x = Date , y = DFP2)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite primaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")+
theme_classic()#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
#  geom_hline(yintercept = 270,color="blue")
dev.off()
pdf("~/Dropbox/LAURENT/AUTO_ENTRE/GRTGAZ/SLIDES_MAI2019/debit2.pdf")
ggplot(data = fullmat)+aes(x = Date , y = DFP2)+
geom_line(color = "red", size=0.5)+
labs(title="Débit de fuite secondaire CA sur 2'ans", x = "temps", y = "Fuite de gaz")+
theme_classic()#,subtitle="Début de hausses des fuites récurrentes après le 09/2018" )+
#  geom_hline(yintercept = 270,color="blue")
dev.off()
df <- fullmat
df$Date <- df$Date %>% as_date()
library(lubridate)
df <- fullmat
df$Date <- df$Date %>% as_date()
df <-  df %>% mutate(Day=ymd(Date))
df <- df %>% select(-State)
df1 <- df %>% group_by(Day) %>% summarise(dfP1_max=max(DFP1),dfP2_max=max(DFP2)) %>%
mutate(Y1=dfP1_max>=80,Y2=dfP2_max>=80)
summary(df1)
df2 <- df %>% select(-DFP1,-DFP2,-Date) %>% group_by(Day) %>% summarise_all(mean)
summary(df2)
df2 %>% head(5)
df2 <- df2 %>% mutate(Day_cle=Day+1) %>% select(-Day)
df3 <- inner_join(df1,df2,by=c("Day"="Day_cle"))
df4 <- df3 %>% select(-Day,-dfP1_max,-dfP2_max,-Y2,-DGG1)
dim(df4)
mod1 <- glm(Y1~.,data=df4,family=binomial)
summary(mod1)
coef(mod1)
summary(mod1) %>% names()
summary(mod1)$coefficients
summary(mod1)$coefficients %>% arrange(desc(abs(3)))
summary(mod1)$coefficients %>% as.tibble()
summary(mod1)$coefficients %>% as.tibble() %>% arrange(`z value`)
summary(mod1)$coefficients %>% as.tibble() %>% arrange(abs(`z value`))
summary(mod1)$coefficients %>% as.tibble() %>% arrange(desc(abs(`z value`)))
summary(mod1)$coefficients %>% data.frame() %>% arrange(desc(abs(`z value`)))
mod1 <- glm(Y1~.,data=df4,family=binomial)
summary(mod1)$coefficients %>% data.frame() %>% arrange(desc(abs(`z value`)))
summary(mod1)$coefficients %>% as.data.frame() %>% arrange(desc(abs(`z value`)))
summary(mod1)$coefficients %>% as.data.frame() %>% arrange(desc(abs(`z value`)))
a<-summary(mod1)$coefficients
rownames(a)
Coef <- summary(mod1)$coefficients %>% mutate(var=rownames(summary(mod1)$coefficients))
Coef <- summary(mod1)$coefficients %>% as.data.frame() %>% mutate(var=rownames(summary(mod1)$coefficients))
head(Coef)
Coef <- summary(mod1)$coefficients %>% as.data.frame() %>% mutate(var=rownames(summary(mod1)$coefficients)) %>% select(c(5,1:4))
Coef
Coef %>% arrange(desc(abs(`z value`)))
Coef %>% arrange(desc(abs(`z value`))) %>% slice(1:8)
q()
library(readxl)
library(tidyverse)
library(broom)
library(reshape2)
library(segmented)
#Data_clash_stats_V1 <- read_excel("Dropbox/LAURENT/ARTICLES/SPORT/DATA/Data_clash_stats V1.xlsx")
#View(Data_clash_stats_V1)
BLOC <- read_excel("~/Dropbox/LAURENT/ARTICLES/SPORT/DATA/Data_clash_stats V3.xlsx",sheet="BLOC")
CONS <- read_excel("~/Dropbox/LAURENT/ARTICLES/SPORT/DATA/Data_clash_stats V3.xlsx",sheet="CONS")
OUTDOOR <- read_excel("~/Dropbox/LAURENT/ARTICLES/SPORT/DATA/Data_clash_stats V3.xlsx",sheet="OUTDOOR")
#suppression des % dans les noms de variables
names(BLOC) <- str_replace_all(names(BLOC),"%","")
names(CONS) <- str_replace_all(names(CONS),"%","")
names(OUTDOOR) <- str_replace_all(names(OUTDOOR),"%","")
nom_rep <- "~/Dropbox/LAURENT/ARTICLES/SPORT/RES/PARTIE2_BIS/CONS"
analyse <- "2.1.2"
trace_reg_seg <- function(df,x,y,sujet,sp=FALSE,export=NULL,analyse=NULL,graine=12,niv_IC=0.95,KP06=FALSE){
if (!sp){
ind_sp <- which(df$Duree_recupe_theorique_min=="SP")
df <- df[-ind_sp,]
}
df <- df %>% dplyr::select(Code_sujet,x,y) %>% filter(Code_sujet %in% sujet)
form <- as.formula(paste(y,"~",x))
res_graphe <- matrix(0,nrow=2,ncol=4) %>% as.data.frame()
names(res_graphe) <- c("x","y","xend","yend")
res_graphe1 <- matrix(0,nrow=2,ncol=4) %>% as.data.frame()
names(res_graphe1) <- c("x","y","xend","yend")
bpoints <- matrix(0,nrow=length(sujet),ncol=5) %>% as.data.frame()
bpoints[,1] <- sujet
names(bpoints) <- c("Sujets","TIR1","IC_inf","IC_sup","TIR_LOO")
for (i in 1:length(sujet)){
dfi <- df %>% filter(Code_sujet==sujet[i]) %>% dplyr::select(-Code_sujet)
dfi[,x] <- as.numeric(unlist(dfi[,x]))
dfi[,y] <- as.numeric(unlist(dfi[,y]))
## Methode 1
set.seed(graine)
if (KP06 & sujet[i]=="KP06"){dfi <- dfi[-c(1,7),]}
modi <- lm(form,data=dfi)
set.seed(graine)
#    ai <- segmented(modi,control=seg.control(list(nonParam=TRUE,display=FALSE,seed=graine+i)))
if.false <- F
nb.iter <- 1
while(if.false == F & nb.iter<=50){
tryCatch({
nb.iter <- nb.iter+1
ai <- segmented(modi,control=seg.control(toll=1e-4))
#    s <- segmented(lm.model, seg.Z =~ydata, psi = NA)
if.false <- T
}, error = function(e){
}, finally = {})
}
if (nb.iter>50){
bpoints[i,2:4] <- mean(unlist(dfi[,1]))
const <- rep(coef(modi)[1],2)
coef_dir <- rep(coef(modi)[2],2)
} else {
bpoints[i,2:4] <- unlist(confint(ai,level=niv_IC))
const <- intercept(ai) %>% unlist()
coef_dir <- slope(ai)[[1]][,1] %>% unlist()
}
res_graphe$x[1] <- min(dfi[,x])
res_graphe$y[1] <- const[1]+coef_dir[1]*min(dfi[,x])
res_graphe$xend[1] <- bpoints[i,2]
res_graphe$yend[1] <- const[1]+coef_dir[1]*bpoints[i,2]
res_graphe$x[2] <- res_graphe$xend[1]
res_graphe$y[2] <- res_graphe$yend[1]
res_graphe$xend[2] <- max(dfi[,x])
res_graphe$yend[2] <- const[2]+coef_dir[2]*max(dfi[,x])
if (nb.iter>50){bpoints[i,2:4] <- NA}
# Methode 2 : LOO
bpi <- NULL
for (j in 1:nrow(dfi)){
modj <- lm(form,data=dfi[-j,])
aj <- segmented(modj,control=seg.control(toll=1e-4,stop.if.error = FALSE,n.boot = 0))
if (length(aj$psi)==3){
bpi <- c(bpi,aj$psi[2])
} else {}
}
modi <- lm(form,data=dfi)
if (is.null(bpi)){
const <- rep(coef(modi)[1],2)
coef_dir <- rep(coef(modi)[2],2)
bpoints[i,5] <- mean(unlist(dfi[,1]))
} else {
ai <- segmented(modi,control=seg.control(toll=1e-4,stop.if.error = FALSE,n.boot = 0,it.max=1),psi=mean(bpi))
const <- intercept(ai) %>% unlist()
coef_dir <- slope(ai)[[1]][,1] %>% unlist()
bpoints[i,5] <- mean(bpi)
}
#    d1 <- dfi %>% filter(.data[[x]]<=mean(bpi))
#    d2 <- dfi %>% filter(.data[[x]]>mean(bpi))
#    m1 <- lm(form,data=d1) %>% coef() %>% unlist()
#    m2 <- lm(form,data=d2) %>% coef() %>% unlist()
#    const <- c(m1[1],m2[1])
#    coef_dir <- c(m1[2],m2[2])
res_graphe1$x[1] <- min(dfi[,x])
res_graphe1$y[1] <- const[1]+coef_dir[1]*min(dfi[,x])
res_graphe1$xend[1] <- bpoints[i,5]
res_graphe1$yend[1] <- const[1]+coef_dir[1]*bpoints[i,5]
res_graphe1$x[2] <- res_graphe1$xend[1]
res_graphe1$y[2] <- res_graphe1$yend[1]
res_graphe1$xend[2] <- max(dfi[,x])
res_graphe1$yend[2] <- const[2]+coef_dir[2]*max(dfi[,x])
res_graphe2 <- bind_rows(Normal=res_graphe,Loo=res_graphe1,.id="Methode")
if (is.null(bpi)){bpoints[i,5] <- NA}
pi <- ggplot(res_graphe2)+aes(x=x,y=y)+geom_segment(aes(xend=xend,yend=yend,color=Methode),size=1)+theme_classic()+ggtitle(sujet[i])+xlab(x)+ylab(y)+
geom_point(data=dfi,aes_(x=as.name(x),y=as.name(y)))
if (!is.null(export)){
ggsave(file.path(nom_rep,paste("GRAPHES/graphes","_",analyse,"_",sujet[i],".pdf",sep="")),pi,device="pdf")
}
}
#  res_bpoints <- as.data.frame(round(bpoints,3)) %>% mutate(sujets=sujet)
#  names(res_bpoints)[1:3] <- c("TOR","binf","bsup")
#  graphe_IC <- ggplot(res_bpoints)+geom_point(aes(x=TOR,y=sujets))+geom_segment(aes(x=binf,y=sujets,xend=bsup,yend=sujets))+theme_classic()
#  if (!is.null(export)){
#    ggsave(file.path(nom_rep,paste("GRAPHES/graphes","_",analyse,"_","conf_int",".pdf",sep="")),graphe_IC,device="pdf")
#  }
if (!is.null(export)){
nom_rep <- paste(nom_rep,"/TABLEAUX",sep="")
write_csv(bpoints,file.path(nom_rep,paste("tab_tir","_",analyse,".csv",sep="")))
}
return(bpoints)
}
x <- c("Duree_recupe_reelle_sec")
y <- c("Rapport_TMMaMarchePost_TMMaM1_")
sujet <- c("AO21","AY22","BB01","BL03","BP04","CJ17","CM19","DF10","DJ23","FP08","GB02","KP06","LJ14","MG18","MY24","PJ11","RJ20")
CONS1 <- CONS %>% #select(Code_sujet,x,y) %>%
filter(!(Code_sujet=="BP04" & Duree_recupe_reelle_sec>500)) %>%
filter(!(Code_sujet=="CJ17" & Duree_recupe_reelle_sec==269)) %>%
filter(!(Code_sujet=="RJ20" & Duree_recupe_reelle_sec>500))
b3 <- trace_reg_seg(CONS1,x,y,sujet,sp=FALSE,export=nom_rep,analyse=analyse,graine=1234,niv_IC=0.95,KP06=FALSE)
b3
CONS1 <- CONS
b3 <- trace_reg_seg(CONS1,x,y,sujet,sp=FALSE,export=nom_rep,analyse=analyse,graine=1234,niv_IC=0.95,KP06=FALSE)
b3
x <- c("Duree_recupe_reelle_sec")
y <- c("Rapport_TMMaMarchePost_TMMaM1_")
sujet <- c("AO21","AY22","BB01","BL03","BP04","CJ17","CM19","DF10","DJ23","FP08","GB02","KP06","LJ14","MG18","MY24","PJ11","RJ20")
CONS1 <- CONS %>% #select(Code_sujet,x,y) %>%
filter(!(Code_sujet=="BP04" & Duree_recupe_reelle_sec>500)) %>%
filter(!(Code_sujet=="CJ17" & Duree_recupe_reelle_sec==269)) %>%
filter(!(Code_sujet=="RJ20" & Duree_recupe_reelle_sec>500))
#CONS1 <- CONS
b3 <- trace_reg_seg(CONS1,x,y,sujet,sp=FALSE,export=nom_rep,analyse=analyse,graine=1234,niv_IC=0.95,KP06=FALSE)
b3
q()
1/30
2/30
library(tidyverse)
ggplo(diamonds)+aes(x=cut)+geom_bar()
ggplot(diamonds)+aes(x=cut)+geom_bar()
ggplot(diamonds)+aes(x=cut)+geom_bar()
diamonds2 <- diamonds[sample(nrow(diamonds),5000),]
ggplot(diamonds2)+aes(x=cut)+geom_bar()
ggplot(diamonds2)+aes(x=cut)+geom_bar()
help(geom_path)
q()
q()
q()
1800/24
q()
q()
install.packages(c("kernlab", "plotROC"))
q()
q()
q()
artere <- read.table("chd.csv",sep=";",header=TRUE)
setwd("~/Dropbox/LIVRE_REGRESSION/GITHUB/regression-avec-R.github.io/correction_exo")
artere <- read.table("chd.csv",sep=";",header=TRUE)
artere <- read.table("artere.txt",sep=";",header=TRUE)
modele <- glm(chd~age,data=artere,family=binomial)
B0 <- coef(modele)
head(artere)
artere <- read.table("artere.txt",header=T)
modele <- glm(chd~age,data=artere,family=binomial)
B0 <- coef(modele)
OriginalDeviance <- modele$deviance
stderr <- summary(modele)$coefficients[, "Std. Error"]
delta <- sqrt(qchisq((1-alpha/4),df=1))* stderr[2] /5
alpha <- 0.95
stderr <- summary(modele)$coefficients[, "Std. Error"]
delta <- sqrt(qchisq((1-alpha/4),df=1))* stderr[2] /5
grille <- B0[2]+(-10):10*delta
profil2 <- rep(0,length(grille))
for (k in 1:length(grille)) {
modeleo <- glm(chd~1,family=binomial,offset=artere[,"age"]*grille[k],data=artere)
profil2[k] <- modeleo$deviance - OriginalDeviance
}
summary(model)
summary(modele)
confint(model)
confint(modele)
q()
