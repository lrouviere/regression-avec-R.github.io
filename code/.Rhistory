recherche <- regsubsets(maxO3~., int=T, nbest=1, nvmax=22,
data=ozone[bloc!=i,])
resume <- summary(recherche)
nomselec <- colnames(resume$which)[
resume$which[which.min(resume$bic),] ][-1]
formule <- formula(paste("maxO3~",paste(nomselec,collapse="+")))
regbic <- lm(formule,data=ozone[bloc!=i,])
RES[bloc==i,"choix"] <- predict(regbic,ozone[bloc==i,])
}
for(i in 1:nbbloc){
###MCO global
reg <- lm(maxO3~.,data=ozone[bloc!=i,])
RES[bloc==i,"MCO"] <- predict(reg,ozone[bloc==i,])
###MCO choix
recherche <- regsubsets(maxO3~., int=T, nbest=1, nvmax=22,
data=ozone[bloc!=i,])
resume <- summary(recherche)
nomselec <- colnames(resume$which)[
resume$which[which.min(resume$bic),] ][-1]
formule <- formula(paste("maxO3~",paste(nomselec,collapse="+")))
regbic <- lm(formule,data=ozone[bloc!=i,])
RES[bloc==i,"choix"] <- predict(regbic,ozone[bloc==i,])
}
ozone.X <- model.matrix(maxO3~.,data=ozone)[,-1]
ozone.Y <- ozone[,"maxO3"]
library(glmnet)
for(i in 1:nbbloc){
XA <- ozone.X[bloc!=i,]
YA <- ozone.Y[bloc!=i]
XT <- ozone.X[bloc==i,]
###ridge
tmp <- cv.glmnet(XA,YA,alpha=0)
mod <- glmnet(XA,YA,alpha=0,lambda=tmp$lambda.min)
RES[bloc==i,"ridge"] <- predict(mod,XT)
###lasso
tmp <- cv.glmnet(XA,YA,alpha=1)
mod <- glmnet(XA,YA,alpha=0,lambda=tmp$lambda.min)
RES[bloc==i,"lasso"] <- predict(mod,XT)
###elastic
tmp <- cv.glmnet(XA,YA,alpha=0.5)
mod <- glmnet(XA,YA,alpha=.5,lambda=tmp$lambda.min)
RES[bloc==i,"elastic"] <- predict(mod,XT)
}
RES
dim(RES)
RES %>% summarize_at(-1,mean((Y-.)^2))
library(tidyverse)
library(tidyverse)
RES %>% summarize_at(-1,mean((Y-.)^2))
help(summarize_at)
RES %>% summarize_at(2:7,mean((Y-.)^2))
RES %>% summarize_at(2:7,mean)
RES %>% summarize_at(2:6,mean)
RES %>% summarize_at(2:6,mean((Y-.)))
RES %>% summarize_at(2:6,funs(mean((Y-.))))
RES %>% summarize_at(2:6,funs(mean((Y-.)^2)))
ozone <- read.table("ozone_complet.txt", header = T, sep = ";")
dim(ozone)
indNA <- which(is.na(ozone), arr.ind = T)[,1]
ozone2 <- ozone[-indNA,]
ozone <- read.table("ozone_transf.txt", header = T, sep = ";")
RES <- data.frame(Y = ozone$maxO3)
nbbloc <- 10
blocseq <- rep(1:nbbloc, length = nrow(ozone))
set.seed(1234)
bloc <- sample(blocseq)
library(leaps)
for(i in 1:nbbloc){
###MCO global
reg <- lm(maxO3~.,data=ozone[bloc!=i,])
RES[bloc==i,"MCO"] <- predict(reg,ozone[bloc==i,])
###MCO choix
recherche <- regsubsets(maxO3~., int=T, nbest=1, nvmax=22,
data=ozone[bloc!=i,])
resume <- summary(recherche)
nomselec <- colnames(resume$which)[
resume$which[which.min(resume$bic),] ][-1]
formule <- formula(paste("maxO3~",paste(nomselec,collapse="+")))
regbic <- lm(formule,data=ozone[bloc!=i,])
RES[bloc==i,"choix"] <- predict(regbic,ozone[bloc==i,])
}
ozone.X <- model.matrix(maxO3~.,data=ozone)[,-1]
ozone.Y <- ozone[,"maxO3"]
library(glmnet)
for(i in 1:nbbloc){
XA <- ozone.X[bloc!=i,]
YA <- ozone.Y[bloc!=i]
XT <- ozone.X[bloc==i,]
###ridge
tmp <- cv.glmnet(XA,YA,alpha=0)
mod <- glmnet(XA,YA,alpha=0,lambda=tmp$lambda.min)
RES[bloc==i,"ridge"] <- predict(mod,XT)
###lasso
tmp <- cv.glmnet(XA,YA,alpha=1)
mod <- glmnet(XA,YA,alpha=0,lambda=tmp$lambda.min)
RES[bloc==i,"lasso"] <- predict(mod,XT)
###elastic
tmp <- cv.glmnet(XA,YA,alpha=0.5)
mod <- glmnet(XA,YA,alpha=.5,lambda=tmp$lambda.min)
RES[bloc==i,"elastic"] <- predict(mod,XT)
}
library(pls)
for(i in 1:nbbloc){
#####PLS
tmp <- plsr(maxO3~.,data=ozone[bloc!=i,],ncomp=20,
validation="CV",scale=TRUE)
mse <- MSEP(tmp,estimate=c("train","CV"))
npls <- which.min(mse$val["CV",,])-1
mod <- plsr(maxO3~.,ncomp=npls,data=ozone[bloc!=i,],scale=TRUE)
RES[bloc==i,"PLS"] <- predict(mod,ozone[bloc==i,],ncomp=npls)
#####PCR
tmp <- pcr(maxO3~.,data=ozone[bloc!=i,],ncomp=20,
validation="CV",scale=TRUE)
mse <- MSEP(tmp,estimate=c("train","CV"))
npcr <- which.min(mse$val["CV",,])-1
mod <- pcr(maxO3~.,ncomp=npcr,data=ozone[bloc!=i,],scale=TRUE)
RES[bloc==i,"PCR"] <- predict(mod,ozone[bloc==i,],ncomp=npcr)
}
RES %>% summarize_at(-1,funs(mean((Y-.)^2)))
RES %>% summarize_at(-1,funs(mean((Y-.)^2)))
dim(ozone)
sse_glmnet <- function(X,Y,bloc,b,a) {
rech <- cv.glmnet(X[bloc!=b,], Y[bloc!=b,drop=FALSE], alpha=a)
prev <- predict(rech, newx=X[bloc==b,], s=rech$lambda.min)
return(sum((Y[bloc==b,"maxO3"] - as.vector(prev))^2))
}
set.seed(1234)
ssereg  <- rep(0,50)
for (r in 1:50) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssereg[r] <- ssereg[r] + sse_reg(ozone,bloc,b)
}
}
sse_reg <- function(don,bloc,b) {
m_reg <- lm(maxO3~.,data=don[bloc!=b,])
previsions <- predict(m_reg,don[bloc==b,])
return(sum((don[bloc==b,"maxO3"]-previsions)^2))
}
set.seed(1234)
ssereg  <- rep(0,50)
for (r in 1:50) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssereg[r] <- ssereg[r] + sse_reg(ozone,bloc,b)
}
}
mean(ssereg/nrow(ozone))
set.seed(1234)
ssereg  <- rep(0,20)
for (r in 1:50) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssereg[r] <- ssereg[r] + sse_reg(ozone,bloc,b)
}
}
mean(ssereg/nrow(ozone))
set.seed(1234)
ssereg  <- rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssereg[r] <- ssereg[r] + sse_reg(ozone,bloc,b)
}
}
mean(ssereg/nrow(ozone))
set.seed(1234)
sseregbic <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sseregbic[r] <- sseregbic[r] + sse_regbic(ozone,bloc,b,22,"exhaustive")
}
}
sse_regbic <- function(don,bloc,b,nvmax,method) {
recherche <- regsubsets(maxO3~., int=T, nbest=1,data=don[bloc!=b,],
nvmax=nvmax,method=method)
resume <- summary(recherche)
nomselec <- colnames(resume$which)[resume$which[which.min(resume$bic),]][-1]
formule <- formula(paste("maxO3 ~", paste(nomselec, collapse = "+")))
m_reg <- lm(formule,data=don[bloc!=b,])
previsions <- predict(m_reg,don[bloc==b,])
return(sum((don[bloc==b,"maxO3"]-previsions)^2))
}
sse_glmnet <- function(X,Y,bloc,b,a) {
rech <- cv.glmnet(X[bloc!=b,], Y[bloc!=b,drop=FALSE], alpha=a)
prev <- predict(rech, newx=X[bloc==b,], s=rech$lambda.min)
return(sum((Y[bloc==b,"maxO3"] - as.vector(prev))^2))
}
library(pls)
sse_pls <- function(don,bloc,b) {
rech <- plsr(maxO3~.^2,data=don[bloc!=b,],ncomp=30,validation="CV",scale=TRUE)
ncomp <- which.min(MSEP(rech)$val["CV",,])-1
prev <- predict(rech,newdata=don[bloc==b,],ncomp=ncomp)
return(sum((don[bloc==b,"maxO3"] - as.vector(prev))^2))
}
sse_pcrS <- function(don,bloc,b) {
rech <- pcr(maxO3~.^2,data=don[bloc!=b,],ncomp=30,validation="CV",scale=TRUE)
ncomp <- which.min(MSEP(rech)$val["CV",,])-1
prev <- predict(rech,newdata=don[bloc==b,],ncomp=ncomp)
return(sum((don[bloc==b,"maxO3"] - as.vector(prev))^2))
}
set.seed(1234)
sseregbic <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sseregbic[r] <- sseregbic[r] + sse_regbic(ozone,bloc,b,22,"exhaustive")
}
}
mean(sseregbic/nrow(ozone))
X <-  model.matrix(maxO3~.,data=ozone)[,-1]
Y <- data.matrix(ozone[,"maxO3",drop=FALSE])
set.seed(1234)
sselasso <- rep(0,50)
for (r in 1:50) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sselasso[r] <- sselasso[r] + sse_glmnet(X,Y,bloc,b,a=1)
}
}
mean(sselasso/nrow(ozone))
set.seed(1234)
sseridge <- rep(0,50)
for (r in 1:50) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sseridge[r] <- sseridge[r] + sse_glmnet(X,Y,bloc,b,a=0)
}
}
mean(sseridge/nrow(ozone))
set.seed(1234)
sseelasticnet <- rep(0,50)
for (r in 1:50) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sseelasticnet[r] <- sseelasticnet[r] + sse_glmnet(X,Y,bloc,b,a=0.5)
}
}
mean(sseelasticnet/nrow(ozone))
set.seed(1234)
ssepls <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssepls[r] <- sseregbic[r] + sse_pls(ozone,bloc,b)
}
}
mean(sseplsc/nrow(ozone))
1+1
mean(ssepls/nrow(ozone))
rm(list=ls())
ozone <- read.table("ozone_complet.txt", header = T, sep = ";")
dim(ozone)
indNA <- which(is.na(ozone), arr.ind = T)[,1]
ozone2 <- ozone[-indNA,]
ozone <- read.table("ozone_transf.txt", header = T, sep = ";")
RES <- data.frame(Y = ozone$maxO3)
nbbloc <- 10
blocseq <- rep(1:nbbloc, length = nrow(ozone))
set.seed(1234)
bloc <- sample(blocseq)
library(leaps)
for(i in 1:nbbloc){
###MCO global
reg <- lm(maxO3~.,data=ozone[bloc!=i,])
RES[bloc==i,"MCO"] <- predict(reg,ozone[bloc==i,])
###MCO choix
recherche <- regsubsets(maxO3~., int=T, nbest=1, nvmax=22,
data=ozone[bloc!=i,])
resume <- summary(recherche)
nomselec <- colnames(resume$which)[
resume$which[which.min(resume$bic),] ][-1]
formule <- formula(paste("maxO3~",paste(nomselec,collapse="+")))
regbic <- lm(formule,data=ozone[bloc!=i,])
RES[bloc==i,"choix"] <- predict(regbic,ozone[bloc==i,])
}
ozone.X <- model.matrix(maxO3~.,data=ozone)[,-1]
ozone.Y <- ozone[,"maxO3"]
library(glmnet)
for(i in 1:nbbloc){
XA <- ozone.X[bloc!=i,]
YA <- ozone.Y[bloc!=i]
XT <- ozone.X[bloc==i,]
###ridge
tmp <- cv.glmnet(XA,YA,alpha=0)
mod <- glmnet(XA,YA,alpha=0,lambda=tmp$lambda.min)
RES[bloc==i,"ridge"] <- predict(mod,XT)
###lasso
tmp <- cv.glmnet(XA,YA,alpha=1)
mod <- glmnet(XA,YA,alpha=0,lambda=tmp$lambda.min)
RES[bloc==i,"lasso"] <- predict(mod,XT)
###elastic
tmp <- cv.glmnet(XA,YA,alpha=0.5)
mod <- glmnet(XA,YA,alpha=.5,lambda=tmp$lambda.min)
RES[bloc==i,"elastic"] <- predict(mod,XT)
}
library(tidyverse)
RES %>% summarize_at(-1,funs(mean((Y-.)^2)))
library(pls)
for(i in 1:nbbloc){
#####PLS
tmp <- plsr(maxO3~.,data=ozone[bloc!=i,],ncomp=20,
validation="CV",scale=TRUE)
mse <- MSEP(tmp,estimate=c("train","CV"))
npls <- which.min(mse$val["CV",,])-1
mod <- plsr(maxO3~.,ncomp=npls,data=ozone[bloc!=i,],scale=TRUE)
RES[bloc==i,"PLS"] <- predict(mod,ozone[bloc==i,],ncomp=npls)
#####PCR
tmp <- pcr(maxO3~.,data=ozone[bloc!=i,],ncomp=20,
validation="CV",scale=TRUE)
mse <- MSEP(tmp,estimate=c("train","CV"))
npcr <- which.min(mse$val["CV",,])-1
mod <- pcr(maxO3~.,ncomp=npcr,data=ozone[bloc!=i,],scale=TRUE)
RES[bloc==i,"PCR"] <- predict(mod,ozone[bloc==i,],ncomp=npcr)
}
RES %>% summarize_at(-1,funs(mean((Y-.)^2)))
sse_reg <- function(don,bloc,b) {
m_reg <- lm(maxO3~.,data=don[bloc!=b,])
previsions <- predict(m_reg,don[bloc==b,])
return(sum((don[bloc==b,"maxO3"]-previsions)^2))
}
sse_regbic <- function(don,bloc,b,nvmax,method) {
recherche <- regsubsets(maxO3~., int=T, nbest=1,data=don[bloc!=b,],
nvmax=nvmax,method=method)
resume <- summary(recherche)
nomselec <- colnames(resume$which)[resume$which[which.min(resume$bic),]][-1]
formule <- formula(paste("maxO3 ~", paste(nomselec, collapse = "+")))
m_reg <- lm(formule,data=don[bloc!=b,])
previsions <- predict(m_reg,don[bloc==b,])
return(sum((don[bloc==b,"maxO3"]-previsions)^2))
}
sse_glmnet <- function(X,Y,bloc,b,a) {
rech <- cv.glmnet(X[bloc!=b,], Y[bloc!=b,drop=FALSE], alpha=a)
prev <- predict(rech, newx=X[bloc==b,], s=rech$lambda.min)
return(sum((Y[bloc==b,"maxO3"] - as.vector(prev))^2))
}
library(pls)
sse_pls <- function(don,bloc,b) {
rech <- plsr(maxO3~.,data=don[bloc!=b,],ncomp=30,validation="CV",scale=TRUE)
ncomp <- which.min(MSEP(rech)$val["CV",,])-1
prev <- predict(rech,newdata=don[bloc==b,],ncomp=ncomp)
return(sum((don[bloc==b,"maxO3"] - as.vector(prev))^2))
}
sse_pcrS <- function(don,bloc,b) {
rech <- pcr(maxO3~.,data=don[bloc!=b,],ncomp=30,validation="CV",scale=TRUE)
ncomp <- which.min(MSEP(rech)$val["CV",,])-1
prev <- predict(rech,newdata=don[bloc==b,],ncomp=ncomp)
return(sum((don[bloc==b,"maxO3"] - as.vector(prev))^2))
}
set.seed(1234)
ssereg  <- rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssereg[r] <- ssereg[r] + sse_reg(ozone,bloc,b)
}
}
mean(ssereg/nrow(ozone))
set.seed(1234)
sseregbic <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sseregbic[r] <- sseregbic[r] + sse_regbic(ozone,bloc,b,22,"exhaustive")
}
}
mean(sseregbic/nrow(ozone))
X <-  model.matrix(maxO3~.,data=ozone)[,-1]
Y <- data.matrix(ozone[,"maxO3",drop=FALSE])
set.seed(1234)
sselasso <- rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sselasso[r] <- sselasso[r] + sse_glmnet(X,Y,bloc,b,a=1)
}
}
mean(sselasso/nrow(ozone))
set.seed(1234)
sseridge <- rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sseridge[r] <- sseridge[r] + sse_glmnet(X,Y,bloc,b,a=0)
}
}
mean(sseridge/nrow(ozone))
set.seed(1234)
sseelasticnet <- rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
sseelasticnet[r] <- sseelasticnet[r] + sse_glmnet(X,Y,bloc,b,a=0.5)
}
}
mean(sseelasticnet/nrow(ozone))
set.seed(1234)
ssepls <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssepls[r] <- ssepls[r] + sse_pls(ozone,bloc,b)
}
}
r
b
sse_pls(ozone,bloc,b)
q
don <- ozone
rech <- plsr(maxO3~.,data=don[bloc!=b,],ncomp=30,validation="CV",scale=TRUE)
dim(ozone)
sse_pls(ozone,bloc,b,ncom=10)
sse_pls(ozone,bloc,b,ncomp=10)
rech <- plsr(maxO3~.,data=don[bloc!=b,],ncomp=10,validation="CV",scale=TRUE)
library(pls)
sse_pls <- function(don,bloc,b) {
rech <- plsr(maxO3~.,data=don[bloc!=b,],ncomp=10,validation="CV",scale=TRUE)
ncomp <- which.min(MSEP(rech)$val["CV",,])-1
prev <- predict(rech,newdata=don[bloc==b,],ncomp=ncomp)
return(sum((don[bloc==b,"maxO3"] - as.vector(prev))^2))
}
sse_pls(ozone,bloc,b)
set.seed(1234)
ssepls <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssepls[r] <- ssepls[r] + sse_pls(ozone,bloc,b)
}
}
mean(ssepls/nrow(ozone))
set.seed(1234)
ssepcp <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssepcr[r] <- ssepcr[r] + sse_pcrS(ozone,bloc,b)
}
}
sse_pcrS <- function(don,bloc,b) {
rech <- pcr(maxO3~.,data=don[bloc!=b,],ncomp=10,validation="CV",scale=TRUE)
ncomp <- which.min(MSEP(rech)$val["CV",,])-1
prev <- predict(rech,newdata=don[bloc==b,],ncomp=ncomp)
return(sum((don[bloc==b,"maxO3"] - as.vector(prev))^2))
}
set.seed(1234)
ssepcr <-  rep(0,20)
for (r in 1:20) {
bloc <- sample(blocseq)
for(b in 1:nbbloc){
ssepcr[r] <- ssepcr[r] + sse_pcrS(ozone,bloc,b)
}
}
mean(ssepcr/nrow(ozone))
ozone <- read.table("ozone_simple.txt",header=T,sep=";")
plot(O3~T12,data=ozone,xlab="T12",ylab="O3")
polyreg <- function(donnee,d=3){
sigmax <- sd(donnee[,"T12"])
grillex <- seq(min(donnee[,"T12"])-sigmax,max(donnee[,"T12"])+sigmax,length=100)
aprevoir <- data.frame(T12=grillex)
regpol <- lm(O3~poly(T12,degree=d,raw=TRUE),data=donnee)
prev <- predict(regpol,aprevoir)
return(list(grillex=grillex,grilley=prev))
}
plot(O3~T12,data=ozone,xlab="T12",ylab="O3")
iter <- 1
for(ii in c(1,2,3,9)){
tmp <- polyreg(ozone,d=ii)
lines(tmp$grillex,tmp$grilley,col=iter,lty=iter)
iter <- iter+1
}
legend(15,150,c("d=1","d=2","d=3","d=9"),col=1:4,lty=1:4)
ind <- which(ozone[,2]<23)
regd <- lm(O3~T12,data=ozone[ind,])
regf <- lm(O3~T12,data=ozone[-ind,])
gxd <- seq(3,23,length=50)
gyd <- regd$coef[1]+gxd*regd$coef[2]
gxf <- seq(23,35,length=50)
gyf <- regf$coef[1]+gxf*regf$coef[2]
plot(O3~T12,data=ozone)
lines(gxd,gyd,col=2,lty=1,lwd=2)
lines(gxf,gyf,col=2,lty=1,lwd=2)
abline(v=23)
library(splines)
XB <- bs(ozone[,2], knots=c(15,23), degree=2,Boundary.knots=c(5,32))
library(splines)
XB <- bs(ozone[,2], knots=c(15,23), degree=2,Boundary.knots=c(5,32))
regs <- lm(ozone[,"O3"] ~ XB)
regs$coef
grillex <- seq(5,32,length=100)
bgrillex <- bs(grillex, knots=c(15,23), degree=2,Boundary.knots=c(5,32))
prev <- bgrillex%*%as.matrix(regs$coeff[-1])+regs$coeff[1]
plot(O3~T12,data=ozone)
lines(grillex,prev,col=2)
abline(v=c(15,23))
regssplinehl1 <- smooth.spline(ozone[,2],ozone[,1],lambda =100)
prevl1 <- predict(regssplinel1,grillex)
regssplinel1 <- smooth.spline(ozone[,2],ozone[,1],lambda =100)
prevl1 <- predict(regssplinel1,grillex)
plot(O3~T12,data=ozone)
lines(prevl1$x,prevl1$y,col=2)
regssplinel1 <- smooth.spline(ozone[,2],ozone[,1],lambda =100)
prevl1 <- predict(regssplinel1,grillex)
plot(O3~T12,data=ozone)
lines(prevl1$x,prevl1$y,col=2)
regsspline <- smooth.spline(ozone[,2],ozone[,1])
prev <- predict(regsspline,grillex)
plot(O3~T12,data=ozone)
lines(prev$x,prev$y,col=2)
regsspline
q()
